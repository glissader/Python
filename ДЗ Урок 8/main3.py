# Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список только числами.
# Класс-исключение должен контролировать типы данных элементов списка.

# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список с числами выводится на экран.

# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class NaNValueException(Exception):
    def __init__(self, n) -> None:
        self.n = n

    def __str__(self) -> str:
        return f'Not a number: {self.n}'

    @staticmethod
    def append_number(nums: list):
        n = input("Введите число ").strip()
        try:
            nums.append(float(n))
        except ValueError:
            raise NaNValueException(n)


numbers = []

while True:
    try:
        NaNValueException.append_number(numbers)
    except NaNValueException as e:
        if e.n == 'stop':
            print(f"\nСписок чисел = {numbers}")
            break
        print(e)
